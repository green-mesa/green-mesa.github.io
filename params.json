{"name":"Green Mesa","tagline":"Javascript Components","body":"## Hyperbone\r\n\r\nHyperbone is a Hypermedia Framework, built on top of [Backbone.js](http://backbonejs.org/), for building client side applications. \r\n\r\nIt natively consumes [JSON HAL](http://stateless.co/hal_specification.html) and adds custom extensions, `_commands` which can come from the server (or be added to your model prototypes in the client) to enable definition of server side interactions, which can then be bound to particular forms.\r\n\r\nUnlike Backbone, Hyperbone's evented models are fully nested - It's Hyperbone all the way down - and support dot notation accessors. \r\n\r\nAlso unlike Backbone, the view engine is far more like Angular's, in that it binds your Hypermedia models directly to the DOM. It supports templated attributes and innerText and a very very small number of custom attributes.\r\n\r\nIt tries to stay true to Backbone's original mission which is to keep your truth out of the DOM. Properly built Hyperbone models mean that your application only manipulates the model, **never** the DOM. Any actual DOM level tinkering that's required should be done via View extensions, for which there's a neato API. \r\n\r\nThe primary side effect of this framework seems to be that you can build a UI for a server side that doesn't yet exist, using `_commands` in the model prototype to simulate the desired API which server-side developers can then use as a well defined spec to build an API to. This seems pretty interesting to me, as I've not been able to work this way before. This will form a core part of the documentation for Hyperbone!\r\n\r\nThere's no one single Hyperbone component yet. Each part of the Framework is distributed via the [Component package manager](https://github.com/component/component). Use one or all of the components as you see fit. \r\n\r\nActivity on this project is high at the moment.\r\n\r\n### [Hyperbone Model](https://github.com/green-mesa/hyperbone-model)\r\n\r\nEvented Hypermedia Models with an API pretty familiar to Backbone users.\r\n\r\n### [Hyperbone View](https://github.com/green-mesa/hyperbone-view)\r\n\r\nBind Hyperbone Models to the DOM, with special Hypermedia conventions.\r\n\r\n### [Hyperbone View Commands](https://github.com/green-mesa/hyperbone-view-commands)\r\n\r\nBind forms in your DOM to specific Hypermedia commands. Bind to Hyperbone Submit events. Where things start getting \"interesting\".\r\n\r\n### Coming Soon: Hyperbone IO\r\n\r\nHyperboneIO deals with network interactions for Hypermedia documents - loading, reloading and sending `_command` data to the server. By keeping as a separate module, you're at liberty to use whatever network interaction stuff you like. \r\n\r\n### Coming Soon: Hyperbone Router\r\n\r\nRouting. Note how by doing this as a standalone module you can replace this with something else.\r\n\r\n### Coming Soon: Hyperbone\r\n\r\nOne single component to add to your project that exposes the full Hyperbone experience.\r\n\r\n## Backbone \r\n\r\nWe have broken Backbone into discrete standalone modules so that Hyperbone can avoid loading unnecessary parts.\r\n\r\nWe have:\r\n\r\n- [Backbone Events](https://github.com/green-mesa/backbone-events)\r\n- [Backbone Model](https://github.com/green-mesa/backbone-model)\r\n- [Backbone Collection](https://github.com/green-mesa/backbone-collection)\r\n- [Backbone Sync](https://github.com/green-mesa/backbone-sync) - Warning: Also installs jQuery. Yikes.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}